//
		__x86i64Int(const std::string& str = "0")
		{
			std::vector<std::thread> threads;
			auto processDigit = [&](const auto digit, vector<uint64_t>& OutVecRef, const int& i)
			{
				OutVecRef[i] = digit - '0';
			};
			digits_.resize(str.size(), 0);
			uint64_t i = 0;
			for (auto it = str.rbegin(); it != str.rend(); ++it)
			{
				if (*it >= '0' && *it <= '9')
				{
					threads.emplace_back([&] {
						processDigit(*it, digits_, i++);
						});
				}
				else if (*it == '-')
				{
					sign_ = -1;
				}
			}
			for (auto& thread : threads)
			{
				thread.join();
			}
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
			trimLeadingZeros();
		}
//
	__x86i64Int(const std::string& str = "0")
		{
			std::for_each(std::execution::par, str.rbegin(), str.rend(), [&](char c) {
				if (c >= '0' && c <= '9')
				{
					digits_.push_back(c - '0');
				}
				else if (c == '-')
				{
					sign_ = -1;
				}
				});
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
			trimLeadingZeros();
		}
//
		__x86i64Int(const std::string& str = "0")
		{
			std::vector<std::thread> threads; 
			auto processDigit = [&](char digit, int& val) {
				int value = digit - '0';
				for (size_t i = 0; i < digits_.size(); i++)
				{
					int result = digits_[i] * value;
					digits_[i] = result % 10;
					if (i + 1 == digits_.size())
					{
						digits_.push_back(result / 10);
					}
					else
					{
						digits_[i + 1] += result / 10;
					}
				}
			};
			digits_.resize(str.size(), 0);
			uint64_t i = 0;
			for (auto it = str.rbegin(); it != str.rend(); ++it)
			{
				if (*it >= '0' && *it <= '9')
				{
					digits_.push_back(*it - '0');
					threads.emplace_back([=] {
						processDigit(*it, digits_[i++]);
						});
				}
				else if (*it == '-')
				{
					sign_ = -1;
				}
			}
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
			for (auto& thread : threads)
			{
				thread.join();
			}
			trimLeadingZeros();
		}
//
		__x86i64Int(const std::string& str = "0")
		{
			std::vector<std::thread> threads; 
			auto processDigit = [&](char digit) {
				int value = digit - '0';
				for (size_t i = 0; i < digits_.size(); i++)
				{
					int result = digits_[i] * value;
					digits_[i] = result % 10;
					if (i + 1 == digits_.size())
					{
						digits_.push_back(result / 10);
					}
					else
					{
						digits_[i + 1] += result / 10;
					}
				}
			};
			for (auto it = str.rbegin(); it != str.rend(); ++it)
			{
				if (*it >= '0' && *it <= '9')
				{
					digits_.push_back(*it - '0');
					threads.emplace_back([=] {
						processDigit(*it);
						});
				}
				else if (*it == '-')
				{
					sign_ = -1;
				}
			}
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
			for (auto& thread : threads)
			{
				thread.join();
			}
			trimLeadingZeros();
		}
//
		__x86i64Int(const std::string& str = "0")
		{
			for (auto it = str.rbegin(); it != str.rend(); ++it)
			{
				if (*it >= '0' && *it <= '9')
				{
					digits_.push_back(*it - '0');
				}
				else if (*it == '-')
				{
					sign_ = -1;
				}
			}
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
			trimLeadingZeros();
		}
//
		__x86i64Int(const uint64_t val = 0) : __x86i64Int{ std::to_string(val) } {}
//
	auto parallelSum = [&](const std::vector<__x86i64Int>& input,
				std::vector<__x86i64Int>& output,
				const uint64_t& start,
				const uint64_t& end) -> void
			{
				if (start == end)
				{
					output[start] = input[start];
					return;
				}
				uint64_t mid = (start + end) / 2;
				std::vector<__x86i64Int> left_output{ mid - start + 1 };
				std::vector<__x86i64Int> right_output{ end - mid };
				auto left_fn = [&]() { parallelSum(input, left_output, start, mid); };
				auto right_fn = [&]() { parallelSum(input, right_output, mid + 1, end); };
				std::thread left_thread(left_fn);
				std::thread right_thread(right_fn, std::cref(input), std::ref(right_output), mid + 1, end);
				left_thread.join();
				right_thread.join();
				std::merge(left_output.begin(), left_output.end(),
					right_output.begin(), right_output.end(),
					output.begin() + start);
				const uint64_t& I = end + 1;
				for (uint64_t& i = start; i < I; i++)
				{
					output[start] += output[i];
				}
			};
//
			auto parallelSum = [](const std::vector<__x86i64Int>& input,
				std::vector<__x86i64Int>& output,
				const uint64_t& start,
				const uint64_t& end) -> void
			{
				if (start == end)
				{
					output[start] = input[start];
					return;
				}
				uint64_t mid = (start + end) / 2;
				std::vector<__x86i64Int> left_output{ mid - start + 1 };
				std::vector<__x86i64Int> right_output{ end - mid };
				std::thread left_thread(parallelSum, std::cref(input), std::ref(left_output), start, mid);
				std::thread right_thread(parallelSum, std::cref(input), std::ref(right_output), mid + 1, end);
				left_thread.join();
				right_thread.join();
				std::merge(left_output.begin(), left_output.end(),
					right_output.begin(), right_output.end(),
					output.begin() + start);
				const uint64_t& I = end + 1;
				for (uint64_t& i = start; i < I; i++)
				{
					output[start] += output[i];
				}
			};
//
		void parallelSum(const std::vector<__x86i64Int>& input,
			std::vector<__x86i64Int>& output,
			uint64_t start,
			uint64_t end) const
		{
			if (start == end)
			{
				output[start] = input[start];
				return;
			}

			uint64_t mid = (start + end) / 2;
			std::vector<__x86i64Int> left_output{ mid - start + 1 };
			std::vector<__x86i64Int> right_output{ end - mid };

			std::thread left_thread(parallelSum, std::cref(input), std::ref(left_output), start, mid);
			std::thread right_thread(parallelSum, std::cref(input), std::ref(right_output), mid + 1, end);

			left_thread.join();
			right_thread.join();

			std::merge(left_output.begin(), left_output.end(),
				right_output.begin(), right_output.end(),
				output.begin() + start);

			const uint64_t& I = end + 1;
			for (uint64_t& i = start; i < I; i++)
			{
				output[start] += output[i];
			}
		}
//
		template<typename... Args>
		requires (std::is_same_v<__x86i64Int, Args...>, "Second arguments... must be of type int")
		bool _pushFront(__x86i64Int& x, Args&... args)
		{
			bool NoErrorsFlag = true;
			for(const int& digit : args)
			{
				if (digit >= 0 && digit < BASE)
				{
					x.digits_.insert(x.digits_.begin(), digit...);
				}
				else
				{
					NoErrorsFlag = false;
					continue;
				}
			}
			return NoErrorsFlag;
		}
//
		template<typename... Args>
		requires (std::is_same_v<__x86i64Int, Args...>, "All arguments must be of type __x86i64Int") // or C++17 static_assert( std::is_same_v<__x86i64Int, Args...>, "All arguments must be of type __x86i64Int" )
		__x86i64Int& _min(const __x86i64Int& arg, const Args&... args) const
		{
			__x86i64Int result{ arg };
			for (const __x86i64Int& val : args)
			{
				if (val < result)
				{
					result = val;
				}
			}
			return result;
		}
//
	template<typename... Args>
		requires (std::is_same_v<uint64_t, Args...>, "Arguments must be of type uint64_t")
		uint64_t& _max(const uint64_t& arg, const Args&... args) const
		{
			uint64_t result = arg;
			for (const uint64_t& val : args)
			{
				if (val > result)
				{
					result = val;
				}
			}
			return result;
		}
//
		bool operator<(const __x86i64Int& other) const
		{
			bool resultFlag = true;
			if (sign_ != other.sign_)
			{
				resultFlag = (sign_ < other.sign_);
			}
			else if (digits_.size() != other.digits_.size())
			{
				resultFlag = (digits_.size() * sign_ < other.digits_.size() * other.sign_);
			}
			else
			{
				for (uint64_t i = digits_.size() - 1; i >= 0; i--)
				{
					if (digits_[i] != other.digits_[i])
					{
						resultFlag = (digits_[i] * sign_ < other.digits_[i] * other.sign_);
						break;
					}
				}
			}
			return resultFlag;
		}
//
	template<typename Number>
	concept NumericDataType = std::is_arithmetic_v<Number>;

	template<NumericDataType Number = uint64_t>
	class __x86i64Int
//
		__x86i64Int(const uint64_t val = 0) : __x86i64Int{ std::to_string(val) } {}
//
		__x86i64Int& operator++() // postfix inc
		{
			*this += 1;
			return *this;
		}
//
		__x86i64Int& operator++(int) // prefix inc
		{
			__x86i64Int temp(*this);
			++(*this);
			return temp;
		}
//
		// constructor
		__x86i64Int(const Number x = 0)
		{
			while (x > 0)
			{
				digits_.push_back(x % BASE);
				x /= BASE;
			}
			if (digits_.empty())
			{
				digits_.push_back(0);
			}
		}
// README.md
Example expressed as C++ Code

```c++

	// Create empty ProofStep[lineNumber][proofStep] vector to store proof
	std::vector<std::vector<std::string>> ProofStep;

 	// Instantiate Prover (module)
	EuclidProver<BracketType::CurlyBraces> Euclid;

	// Use chars, as opposed to std::strings, for efficiency and minor performance gains
	/* char */ std::string PlayerCharacterSideKick = "1";
	/* char */ std::string QuadUtilityVehicle = "1";
	/* char */ std::string VehicleDriveDisabled = "1";
	/* char */ std::string EuropaLAnd = "1";
	/* char */ std::string StyxRiver = "2";
	/* char */ std::string NotInEuropaLand = "2";
	/* char */ std::string OutOfStyxBoat = "4";

	// Add axioms
	Euclid.Axiom({"{", "1", "}","+","{", "1", "}","=","{", "2", "}"}); // axiom_0
	Euclid.Axiom({ "{", "2", "}","+","{", "2", "}","=","4" }); // axiom_1

	// Add supporting lemmas
	Euclid.Lemma({ "{", "1", "}","+","{", "0", "}","=","{", "1", "}" }); // lemma_0

	// Theorem to Prove
	const std::vector<std::string> Prove = { "{", "4", "}", "=", "{", "1", "}","+","{", "1", "}","+","{", "1", "}", "+", "{", "1", "}" };

	if (Euclid.Prove(Prove, ProofStep))
	{
		std::cout << "Proof found:\n";
		Euclid.PrintPath(ProofStep);
	}
	else
	{
		std::cout << "Proof failed\n";
	}

	// Optional Solver: Expand
	std::vector<std::vector<std::string>> ProofStep;
	if (Euclid.ProveViaExpand(Prove, ProofStep))
	{
		std::cout << "Proof via Expand:\n";
		Euclid.PrintPath(ProofStep);
	}
	else
	{
		std::cout << "Proof via Expand failed\n";
	}

	// Optional Solver: Reduce
	std::vector<std::vector<std::string>> ProofStep;
	if (Euclid.ProveViaReduce(Prove, ProofStep))
	{
		std::cout << "Proof via Reduce:\n";
		Euclid.PrintPath(ProofStep);
	}
	else
	{
		std::cout << "Proof via Reduce failed\n";
	}

	
```
//
template<NumericDataType NumberBase = uint64_t>
	NumberBase PowerUInt64(const NumberBase& ConstNumberRef, 
		const NumberBase& ConstExponentRef)
	{
		NumberBase result = NumberBase{ ConstNumberRef };
		NumberBase radix = NumberBase{ ConstExponentRef };
		while (radix--)
		{
			result *= ConstNumberRef;
		}
		return result;
	};
//
		static bool IsPrimeUInt64(const uint64_t& n)
		{
			if (n <= 1)
			{
				return false;
			}
			if (n <= 3)
			{
				return true;
			}
			if (n % 2 == 0 || n % 3 == 0)
			{
				return false;
			}
			for (uint64_t i = 5; i * i <= n; i += 6)
			{
				if (n % i == 0 || n % (i + 2) == 0)
				{
					return false;
				}
			}
			return true;
		}
//
		__x86i64Int operator*(const __x86i64Int& other) const
		{
			__x86i64Int result;
			result.digits_.resize(digits_.size() + other.digits_.size());
			for (uint64_t i = 0; i < digits_.size(); i++)
			{
				uint64_t carry = 0;
				for (uint64_t j = 0; j < other.digits_.size() || carry > 0; j++)
				{
					uint64_t prod = result.digits_[i + j] + 
						carry + 
						digits_[i] * 
						(j < other.digits_.size() ? other.digits_[j] : 0);
					result.digits_[i + j] = prod % BASE;
					carry = prod / BASE;
				}
			}
			result.trimLeadingZeros();
			result.sign_ = sign_ * other.sign_;
			return result;
		}
//
		__x86i64Int(const char* str) : __x86i64Int(std::string(str))
		{

		}
//
		bool Lemma(const std::vector<std::string>& InLemmaVecConstStdStringRef)
		{
			bool LemmaAcceptedFlag = false;
			const std::string& delim = "=";
			bool LeftHandSideFlag = true;
			std::vector<std::string> lhs{};
			std::vector<std::string> rhs{};
			bool FirstIndexFlag = false;
			uint64_t nCompositeIndexUInt64 = 0;
			for (const std::string& token : InLemmaVecConstStdStringRef)
			{
				if (FirstIndexFlag && LeftHandSideFlag)
				{
					LemmaLHSPrimeComposite.push_back(1); // lhs[0] == PrimeCompositeUInt64 //
					FirstIndexFlag = false;
				}
				if (token == delim)
				{
					LeftHandSideFlag = false;
					if (rhs.size() > 0)
					{
						LemmaRHS.push_back(rhs);
						rhs = {}; 
						nCompositeIndexUInt64++;
						LemmaRHSPrimeComposite.push_back(1);
					}
					continue;
				}
				if (!TokenLibraryStdStringToUInt64tMap.contains(token))
				{
					TokenLibraryStdStringToUInt64tMap.insert({ token,
						PrimeNumberGen::NextPrimeUInt64() });
				}
				if (LeftHandSideFlag)
				{
					lhs.push_back(token);
					LemmaLHSPrimeComposite[nCompositeIndexUInt64] *= TokenLibraryStdStringToUInt64tMap.at(token);
				}
				else
				{
					rhs.push_back(token);
					LemmaRHSPrimeComposite[nCompositeIndexUInt64] *= TokenLibraryStdStringToUInt64tMap.at(token);
				}
			}
			if (lhs.size() < 1 ||
				rhs.size() < 1)
			{
				std::cout << "Warning - Missing equals '=' in axiom or lemma. Axioms and lemmas must have 'lhs... = rhs...' layout." << std::endl;
				/* LemmaAcceptedFlag : false */ 
			}
			else
			{
				LemmaLHS.push_back(lhs);
				LemmaRHS.push_back(rhs);
				LemmaAcceptedFlag = true;
			}
			
			return LemmaAcceptedFlag;
		}
//
template<BracketType EuclidBracket>
	class API_EXPORT EuclidProver
	{
	public:
		explicit EuclidProver() : _openBrace { BracketTraits<EuclidBracket>::Open },
			_closeBrace{ BracketTraits<EuclidBracket>::Close }
		{
			/*
			static_assert(std::is_same_v<decltype(EuclidBracket), BracketType>, "Invalid bracket type");
			_openBrace = BracketTraits<EuclidBracket>::Open;
			_closeBrace = BracketTraits<EuclidBracket>::Close;*/
		}
		bool Axiom(const std::vector<char>& InAxiomVecConstCharRef) const
		{
			bool AxiomAcceptedFlag = false;
			return AxiomAcceptedFlag;
		}
		bool Axiom(const std::initializer_list<char>& InAxiomInitListConstCharRef) const
		{
			const std::vector<char>& InAxiomVecConstCharRef{ InAxiomInitListConstCharRef };
			return Axiom(InAxiomVecConstCharRef);
		}
		bool Lemma(const std::vector<char>& InLemmaVecConstCharRef) const
		{
			bool LemmaAcceptedFlag = false;
			return LemmaAcceptedFlag;
		}
		bool Lemma(const std::initializer_list<char>& InLemmaInitListConstCharRef) const
		{
			const std::vector<char>& InLemmaVecConstCharRef{ InLemmaInitListConstCharRef };
			return Lemma(InLemmaVecConstCharRef);
		}
		bool Prove(const std::vector<char>& InProofTargetVecConstCharRef,
			std::vector<std::vector<char>>& OutPath2DVecCharRef)
		{
			bool ResultFoundFlag = false;
			return ResultFoundFlag;
		}
		bool ProveViaReduce(const std::vector<char>& InProofTargetVecChar,
			std::vector<std::vector<char>>& OutReducePathVec2DCharRef)
		{
			bool ResultFoundFlag = false;
			return ResultFoundFlag;
		}
		bool ProveViaExpand(const std::vector<char>& InProofTargetVecConstChar,
			std::vector<std::vector<char>>& OutExpandPathVec2DCharRef)
		{
			bool ResultFoundFlag = false;
			return ResultFoundFlag;
		}
		void PrintPath(const std::vector<std::vector<char>>& InPathVec2DConstChar) const
		{

		}
	private:
		const char _openBrace;// = BracketTraits<EuclidBracket>::Open;
		const char _closeBrace;// = BracketTraits<EuclidBracket>::Close;
	};