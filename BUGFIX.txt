
SYMP:
	Warning	C4251	'PrimeNumberGen::primes': class 'std::vector<uint64_t,std::allocator<uint64_t>>' needs to have dll-interface to be used by clients of class 'PrimeNumberGen'
	Error	C2491	'PrimeNumberGen::current_prime': definition of dllimport static data member not allowed	EuclidConsoleDebugger

SOLU:
	uint64_t PrimeNumberGen::current_prime = ... >> uint64_t current_prime = ...
	std::vector<uint64_t> PrimeNumberGen::primes = ... >> std::vector<uint64_t> primes = ...

SYMP: EuclidConsoleDebugger.cpp: Unresolved external symbol "public: __cdecl PrimeNumberGen::PrimeNumberGen(void)" (??0PrimeNumberGen@@QEAA@XZ)
SOLU: Congiguration Properties > Configuration Type > Static Library (.lib) >> Congiguration Properties > Configuration Type > Dynamic Library (.dll)

SYMP:
	EuclidProverLibDLLDebugConsole.cpp: Unresolved external symbol "public: __cdecl template<BracketType::CurlyBraces> class API_EXPORT EuclidProver

SOLU:
	template<BracketType EuclidBracket> class API_EXPORT EuclidProver ... >> 
	
	template<> class API_EXPORT EuclidProver<BracketType::CurlyBraces> ...
	template<> class API_EXPORT EuclidProver<BracketType::Parentheses> ...
	template<> class API_EXPORT EuclidProver<BracketType::SquareBraces> ...

SYMP:	Error no overloaded function of Axiom matches the parameter list
SOLU:	const std::vector<char>& axiom_0 = { '{', '1', '}','+','{', '1', '}','=','{', '2', '}' }; >> 
		const std::vector<std::string>& axiom_0 = { "{", "1", "}","+","{", "1", "}","=","{", "2", "}" };

SYMP: Error Initial reference to a nonconst must be an lvalue
SOLU: for (auto& it = str.rbegin(); it != str.rend(); ++it){...} >> for (auto it = str.rbegin(); it != str.rend(); ++it){...}

SYMP: Error: no matching function for call to 'PushAtFront(__x86i64Int&, const __x86i64Int&)'
SOLU:
	bool PushAtFront(__x86i64Int& OutVecUInt64Ref, const __x86i64Int& InConstVecUInt64Ref) {...} >>
	bool PushAtFront(__x86i64Int& OutVecUInt64Ref, const __x86i64Int& InConstVecUInt64Ref) const {...}

SYMP: Error std::jthread parameter must be invokable, evaluates to false. std::jthread t(Auto, Theorem, Axioms_vec); // Auto(Theorem_Struct& InTheorem, std::vector<Axiom_Struct>& InAxioms_vec);
SOLU: 
	std::jthread t(Auto, Theorem, Axioms_vec); // Auto(Theorem_Struct InTheorem, std::vector<Axiom_Struct> InAxioms_vec); or
	std::jthread t(Auto, std::ref(Theorem), std::ref(Axioms_vec)); // Auto(Theorem_Struct& InTheorem, std::vector<Axiom_Struct>& InAxioms_vec); or
	std::jthread t(Auto, std::ref(Theorem), std::cref(Axioms_vec)); // Auto(Theorem_Struct& InTheorem, const std::vector<Axiom_Struct>& InAxioms_vec);
